{"version":3,"sources":["logo.svg","helpers/Constants.ts","services/AuthService.ts","services/ApiService.ts","components/JsonTreeViewer.tsx","components/AuthContent.tsx","components/Buttons.tsx","components/AppContent.tsx","components/Header.tsx","containers/App.tsx","registerServiceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Constants","Object","classCallCheck","this","stsAuthority","clientId","clientRoot","clientScope","apiRoot","AuthService","userManager","settings","authority","client_id","redirect_uri","concat","silent_redirect_uri","post_logout_redirect_uri","response_type","scope","UserManager","Log","logger","console","level","INFO","createClass","key","value","getUser","signinRedirect","signinSilent","signoutRedirect","ApiService","authService","_this","then","user","access_token","_callApi","catch","error","response","status","renewToken","renewedUser","Error","token","headers","Accept","Authorization","axios","get","JsonTreeViewer","R","props","data","react","title","lib_default","a","theme","shouldExpandNode","renderJsonData","React","AuthContent","keyPath","className","JsonTreeViewer_JsonTreeViewer","api","Buttons","style","marginTop","margin","onClick","login","callApi","logout","AppContent","possibleConstructorReturn","getPrototypeOf","call","apiService","shouldCancel","setState","toastr","state","components_Buttons","AuthContent_AuthContent","Header","src","logoSrc","alt","pageTitle","App","logo","AppContent_AppContent","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","ReactDOM","src_containers_App","document","getElementById","URL","process","toString","origin","addEventListener","fetch","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.390e6468.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","export class Constants {\r\n  public static stsAuthority = \"https://demo.identityserver.io/\";\r\n  public static clientId = \"spa\";\r\n  public static clientRoot = \"https://keen-pasteur-588c39.netlify.com\";\r\n  public static clientScope = \"openid profile email api\";\r\n\r\n  public static apiRoot = \"https://demo.identityserver.io/api/\";\r\n}\r\n","import { Log, User, UserManager } from 'oidc-client';\r\n\r\nimport { Constants } from '../helpers/Constants';\r\n\r\nexport class AuthService {\r\n  public userManager: UserManager;\r\n\r\n  constructor() {\r\n    const settings = {\r\n      authority: Constants.stsAuthority,\r\n      client_id: Constants.clientId,\r\n      redirect_uri: `${Constants.clientRoot}signin-callback.html`,\r\n      silent_redirect_uri: `${Constants.clientRoot}silent-renew.html`,\r\n      // tslint:disable-next-line:object-literal-sort-keys\r\n      post_logout_redirect_uri: `${Constants.clientRoot}`,\r\n      response_type: 'code',\r\n      scope: Constants.clientScope\r\n    };\r\n    this.userManager = new UserManager(settings);\r\n\r\n    Log.logger = console;\r\n    Log.level = Log.INFO;\r\n  }\r\n\r\n  public getUser(): Promise<User | null> {\r\n    return this.userManager.getUser();\r\n  }\r\n\r\n  public login(): Promise<void> {\r\n    return this.userManager.signinRedirect();\r\n  }\r\n\r\n  public renewToken(): Promise<User> {\r\n    return this.userManager.signinSilent();\r\n  }\r\n\r\n  public logout(): Promise<void> {\r\n    return this.userManager.signoutRedirect();\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport { Constants } from '../helpers/Constants';\r\nimport { AuthService } from './AuthService';\r\n\r\nexport class ApiService {\r\n  private authService: AuthService;\r\n\r\n  constructor() {\r\n    this.authService = new AuthService();\r\n  }\r\n\r\n  public callApi(): Promise<any> {\r\n    return this.authService.getUser().then(user => {\r\n      if (user && user.access_token) {\r\n        return this._callApi(user.access_token).catch(error => {\r\n          if (error.response.status === 401) {\r\n            return this.authService.renewToken().then(renewedUser => {\r\n              return this._callApi(renewedUser.access_token);\r\n            });\r\n          }\r\n          throw error;\r\n        });\r\n      } else if (user) {\r\n        return this.authService.renewToken().then(renewedUser => {\r\n          return this._callApi(renewedUser.access_token);\r\n        });\r\n      } else {\r\n        throw new Error('user is not logged in');\r\n      }\r\n    });\r\n  }\r\n\r\n  private _callApi(token: string) {\r\n    const headers = {\r\n      Accept: 'application/json',\r\n      Authorization: 'Bearer ' + token\r\n    };\r\n\r\n    return axios.get(Constants.apiRoot + 'test', { headers });\r\n  }\r\n}\r\n","import * as R from 'ramda';\r\nimport * as React from 'react';\r\nimport JSONTree from 'react-json-tree';\r\n\r\nexport interface IJsonTreeViewer {\r\n  data: any;\r\n  title: string;\r\n  shouldExpandNode?: (keyPath: Array<string | number>, data: [any] | {}, level: number) => boolean;\r\n}\r\n\r\nexport default class JsonTreeViewer extends React.Component<IJsonTreeViewer, any> {\r\n  public renderJsonData() {\r\n    return R.not(R.isEmpty(this.props.data)) && R.not(R.isNil(this.props.data)) ? (\r\n      <>\r\n        <h1>{this.props.title}</h1>\r\n        <JSONTree data={this.props.data} theme=\"bright\" shouldExpandNode={this.props.shouldExpandNode} />\r\n      </>\r\n    ) : null;\r\n  }\r\n\r\n  public render() {\r\n    return this.renderJsonData();\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport JsonTreeViewer from './JsonTreeViewer';\r\n\r\nexport interface IAuthContentProps {\r\n  api: any;\r\n  user: any;\r\n}\r\n\r\nexport default class AuthContent extends React.Component<IAuthContentProps, any> {\r\n  public shouldExpandNode = (keyPath: Array<string | number>, data: [any] | {}, level: number) => {\r\n    return true;\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <JsonTreeViewer data={this.props.user} title=\"User Profile\" shouldExpandNode={this.shouldExpandNode} />\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <JsonTreeViewer data={this.props.api} title=\"Api Response\" shouldExpandNode={this.shouldExpandNode} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from 'react';\r\n\r\ninterface IButtonsProps {\r\n  login: () => void;\r\n  getUser: () => void;\r\n  callApi: () => void;\r\n  renewToken: () => void;\r\n  logout: () => void;\r\n}\r\n\r\nconst Buttons: React.SFC<IButtonsProps> = props => {\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-12 text-center\" style={{ marginTop: '30px' }}>\r\n        <button className=\"btn btn-primary btn-login\" style={{ margin: '10px' }} onClick={props.login}>\r\n          Login\r\n        </button>\r\n        <button className=\"btn btn-secondary btn-getuser\" style={{ margin: '10px' }} onClick={props.getUser}>\r\n          Get User info\r\n        </button>\r\n        <button className=\"btn btn-warning btn-getapi\" style={{ margin: '10px' }} onClick={props.callApi}>\r\n          Call API\r\n        </button>\r\n        <button className=\"btn btn-success btn-renewtoken\" style={{ margin: '10px' }} onClick={props.renewToken}>\r\n          Renew Token\r\n        </button>\r\n        <button className=\"btn btn-dark btn-logout\" style={{ margin: '10px' }} onClick={props.logout}>\r\n          Logout\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import * as React from 'react';\r\n\r\nimport * as toastr from 'toastr';\r\nimport { ApiService } from '../services/ApiService';\r\nimport { AuthService } from '../services/AuthService';\r\n\r\nimport AuthContent from './AuthContent';\r\nimport Buttons from './Buttons';\r\n\r\nexport default class AppContent extends React.Component<any, any> {\r\n  public authService: AuthService;\r\n  public apiService: ApiService;\r\n  private shouldCancel: boolean;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.authService = new AuthService();\r\n    this.apiService = new ApiService();\r\n    this.state = { user: {}, api: {} };\r\n    this.shouldCancel = false;\r\n  }\r\n\r\n  public componentDidMount() {\r\n    this.getUser();\r\n  }\r\n\r\n  public login = () => {\r\n    this.authService.login();\r\n  };\r\n\r\n  public callApi = () => {\r\n    this.apiService\r\n      .callApi()\r\n      .then(data => {\r\n        this.setState({ api: data.data });\r\n        toastr.success('Api return successfully data, check in section - Api response');\r\n      })\r\n      .catch(error => {\r\n        toastr.error(error);\r\n      });\r\n  };\r\n\r\n  public componentWillUnmount() {\r\n    this.shouldCancel = true;\r\n  }\r\n\r\n  public renewToken = () => {\r\n    this.authService\r\n      .renewToken()\r\n      .then(user => {\r\n        toastr.success('Token has been sucessfully renewed. :-)');\r\n        this.getUser();\r\n      })\r\n      .catch(error => {\r\n        toastr.error(error);\r\n      });\r\n  };\r\n\r\n  public logout = () => {\r\n    this.authService.logout();\r\n  };\r\n\r\n  public getUser = () => {\r\n    this.authService.getUser().then(user => {\r\n      if (user) {\r\n        toastr.success('User has been successfully loaded from store.');\r\n      } else {\r\n        toastr.info('You are not logged in.');\r\n      }\r\n\r\n      if (!this.shouldCancel) {\r\n        this.setState({ user });\r\n      }\r\n    });\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <>\r\n        <Buttons\r\n          login={this.login}\r\n          logout={this.logout}\r\n          renewToken={this.renewToken}\r\n          getUser={this.getUser}\r\n          callApi={this.callApi}\r\n        />\r\n\r\n        <AuthContent api={this.state.api} user={this.state.user} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import * as React from 'react';\r\n\r\nexport interface IHeaderProps {\r\n  pageTitle: string;\r\n  logoSrc: any;\r\n}\r\n\r\nexport default function Header(props: IHeaderProps) {\r\n  return (\r\n    <header className=\"App-header\">\r\n      <img src={props.logoSrc} className=\"App-logo\" alt=\"logo\" />\r\n      <h1 className=\"App-title\">{props.pageTitle}</h1>\r\n    </header>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport AppContent from '../components/AppContent';\r\nimport Header from '../components/Header';\r\nimport logo from '../logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  public render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header pageTitle=\"Welcome to React and oidc-client-js\" logoSrc={logo} />\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <AppContent />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL!,\r\n      window.location.toString()\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker) {\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a 'New content is\r\n                // available; please refresh.' message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // 'Content is cached for offline use.' message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        }\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type')!.indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'toastr/build/toastr.min.css';\r\n\r\nimport 'react-app-polyfill/ie11';\r\nimport 'core-js';\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport App from './containers/App';\r\nimport './index.css';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root') as HTMLElement);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}